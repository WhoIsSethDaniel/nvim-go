// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\x41\x6a\xc3\x40\x0c\x45\xaf\x22\x8c\x17\x2d\x18\x1d\xa0\xd0\x03\x78\x53\x4a\x5b\xda\xb5\x18\xcb\xae\xc0\x9e\x16\x8d\x92\x10\x84\xee\x1e\xc6\x38\x99\xd5\x87\x3f\x6f\xde\x97\xfb\xc4\xb3\x64\x86\x2e\xd1\xba\x76\x11\xee\x17\xb1\x5f\xc0\x0f\x4e\x2c\x67\xd6\xda\xc8\x0c\xf9\xcf\x00\xc7\xf2\x69\x7a\x4a\x16\x61\x86\xee\x9c\xa7\xfa\x7a\x27\x01\x23\x5a\x8b\x6f\xb4\x71\xc4\x93\xbb\x52\x5e\x18\x7a\x19\xa0\xe7\x15\x5e\x5e\x01\xdf\x49\x69\x63\x63\x2d\x87\xbd\x97\x88\x01\x1e\x7f\xdb\xde\x8f\x8a\xd5\x1b\xcc\x90\x74\x29\x4d\xbf\x2b\xea\xe2\x4e\xe3\xd7\xf5\x9f\x71\x2c\xdf\xa4\x42\x93\xa4\x08\xc4\xc6\xee\xf1\x7c\xe4\x2d\x00\x00\xff\xff\x65\x08\xbc\x88\xf1\x00\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1476415710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x6f\xdb\x38\x10\x3d\x4b\xbf\x62\x62\x24\x81\xbd\x70\x98\xbb\x03\x1f\x36\x48\x76\xb1\x87\x8d\x0b\x27\x68\x0e\x45\x51\x30\xf2\xc8\x25\x4a\x53\x2e\x39\x4a\x60\x10\xfc\xef\x05\x29\xea\xd3\x72\x9a\x4b\x73\x88\xad\x11\x39\xef\xf1\xcd\x7b\xb4\xb5\x1b\xcc\x85\x42\x98\xe4\xa5\xca\x48\x14\x6a\xe2\x5c\x6a\xed\x15\x9c\xe7\xb0\x58\x02\x73\x2e\x4d\xfd\x2b\xb0\x96\x3d\xa1\xa1\x07\xbe\x43\xe7\xa6\x04\x7f\x11\x1a\x12\x6a\xcb\x9e\x66\x60\xd3\xc4\x6f\x79\x13\xf4\x1d\xd8\x1a\x33\x14\xaf\xa8\x9d\x4b\x93\x50\x16\x39\xb0\xff\xcc\x23\xe9\x32\xa3\x50\x6c\xaa\xff\x08\x94\x1b\x53\xd5\x12\x3a\xec\x11\xf2\x50\x01\x13\x16\xfb\xbe\x71\xb5\xe6\x6a\x8b\x83\x0d\x89\xb5\xe1\xd9\x93\x0c\xf4\x0e\x7b\x8c\xaf\xfc\x16\x54\x9b\xf8\xd4\x60\xd6\xa5\xce\xf7\xc1\x57\xcf\xca\x1f\xf3\x13\xd7\x7c\x87\x84\x3a\x80\x05\x6a\x5c\x6f\x7b\xc4\x3a\xb4\x8e\x77\x04\xc0\x50\x3a\x62\xd7\x41\xec\xe3\x7b\x41\x8d\x17\xfd\xcb\xd7\x0e\x8c\xe2\x3b\xf4\xb0\x42\x6d\xe3\xe6\x11\x99\x6b\xee\x5c\x6d\x5a\xad\x07\x72\x45\x69\xab\x8f\x46\x11\x69\x5a\xcd\xea\x96\xc7\x82\x9e\x10\xef\x1d\xc9\x92\x24\xe8\xe5\xff\x8d\xec\xe9\xe8\xb6\x46\x53\x4a\x32\x35\xce\x33\x57\xf4\x9e\x64\x0d\xe4\x1a\xa9\xd4\xca\xdc\x6b\x5d\x44\x0d\xde\xb8\xa2\x7b\xad\xe1\xa5\x28\xe4\x40\x67\x2f\xe4\xf5\x35\x3c\xad\xee\x56\x0b\xf8\x7b\xb3\x01\xaf\x35\x64\xdc\xa0\x61\x61\x0c\x79\xa1\xc1\x5a\x91\x83\x2a\xc8\x2b\xf8\xc0\x7f\xe0\xc6\x39\xf8\x36\x07\x22\x3f\x13\x6b\x43\xaf\xc8\xbc\x1a\x95\x4d\x21\xfe\xd5\xa4\x1e\xcb\x97\xea\x95\x73\xc4\xd6\xa5\x9a\x12\x31\x3f\xc0\x39\xf8\x0c\x0d\x53\x03\x91\x22\x5c\xb5\x2a\x8f\x0d\xf7\x44\x8a\x8e\x46\x16\x68\x86\x71\x1c\xf6\x18\x16\x73\xed\xdc\x65\xa4\x1e\x05\x65\x9f\xb9\x2c\xd1\x39\x5b\xb7\x38\x11\xae\xc4\x5a\x56\x85\x7d\x01\x44\xac\xb2\x0d\xeb\x44\x6e\xde\x36\x68\xa3\x96\x8c\xe4\xef\xe8\x21\xe2\x8d\x24\xa6\x3e\xe6\xb3\x16\xd4\x9c\xbe\x97\xa4\xc5\x12\x2e\x5f\x0e\x84\x86\xdd\x96\x79\x8e\xda\x7e\x04\x30\x26\x63\x1a\x86\xbb\x52\xf2\xd0\x35\xcf\xec\xb8\xbe\x52\x18\x54\x9a\x41\xc3\x8c\x70\xb7\x97\x9c\x10\x26\xba\x32\xec\x04\xce\xf3\x60\xd3\xf6\x4d\xc6\xa5\xac\xca\xa7\x58\x8c\xb8\x36\x11\x79\x9c\xda\x90\x98\x73\x80\x5a\x57\x53\x1d\x03\xb9\x69\x4c\x39\xf5\xeb\xce\x96\xa0\x84\x9c\xf9\x4f\x22\x56\x87\x21\x8e\x99\x58\x68\x99\x4f\x27\xdd\x5e\x3b\x34\x86\x6f\x31\x1e\x05\xfd\x0a\x58\xc2\xc5\xeb\x1c\xea\xed\x17\xaf\x93\x79\x0f\x5e\xa8\x7d\xd9\x1c\x1e\xb5\x9e\x77\xc0\x66\xad\x23\xea\x4b\xa1\x97\xee\x24\x49\xb2\x42\x91\x50\x25\x8e\x79\xe7\x5d\xb3\x1c\x37\x3b\xe5\x96\xa0\xe7\xbf\x05\xb5\x91\x68\xdc\xc3\x1e\xc3\x3d\x3a\x9d\xdd\x74\x96\x54\x7a\x75\x6f\x9e\xd6\x51\xd2\x60\xc4\xb8\xe5\x46\x64\x9d\x5f\x98\x66\x6c\xe7\xf9\x98\x73\x7c\xdc\x7a\x1c\xba\x0a\x4a\xa1\x70\x38\xc2\x0f\xf3\xf9\x43\xf8\x67\x1a\x73\x89\x19\xb1\x3b\xc4\xfd\xfd\xcf\x92\xcb\x69\xd3\x61\xde\x27\x34\xeb\x32\x6a\xa6\xf7\x11\x87\xd5\x84\x23\xd9\xff\x4b\x49\x62\x2f\x7b\x64\x23\x9f\xd6\x85\xbf\xb1\xe0\x49\x92\xa7\x7f\xf9\x07\x17\x35\xf8\x03\x75\x2f\x62\x97\xba\x34\x8d\x3c\xd2\x5f\x01\x00\x00\xff\xff\x3e\xcd\x23\xb1\x21\x09\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 2337, mode: os.FileMode(420), modTime: time.Unix(1478142020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\xcb\x31\x0a\x02\x31\x10\x85\xe1\x7e\x4e\x31\x6c\xa5\x4d\xee\x61\x23\x5e\x61\x30\xcf\xdd\x20\x89\x21\xa6\x7b\xbc\xbb\x0b\x06\xb6\xfb\xf8\xe1\x27\x33\x5e\xa5\xc1\xb7\x03\x91\x31\x36\xc9\x7a\x3c\xdf\xb1\xc3\xc9\xf4\x58\x94\xcc\x4a\xed\x9f\x31\xfd\x62\xe4\x88\xb6\xc3\xd3\xed\x5f\xbe\x12\x99\xee\x51\x21\xad\x65\x1e\x92\x91\x68\x59\xb2\xeb\xa9\x5f\x00\x00\x00\xff\xff\x81\x22\x53\x6f\x6b\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 107, mode: os.FileMode(420), modTime: time.Unix(1476415710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\xc9\xcc\x4b\x55\xaa\xad\x55\xa8\xae\x2e\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\x4a\x4e\xcc\xc9\x51\x52\xd0\x03\x8b\xa6\xe6\xa5\xd4\xd6\x02\x02\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1476415710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8d\x31\x0a\x02\x41\x0c\x45\xaf\x12\x96\x2d\x25\x07\x10\x3c\x80\x9d\xe0\x09\x22\x9b\x59\xa6\xd8\x28\x99\x6c\xf5\xc9\xdd\x65\x46\x8b\xa9\x12\x1e\xff\xbf\x0f\x6c\x5a\xaa\x29\x2d\xd5\x3e\x67\xb4\x25\x13\x58\x0b\x5d\x6f\xc4\xfd\xad\x85\xec\x1d\xc4\xcf\xf3\x15\xda\xa2\x65\x46\xb0\xc9\xa1\x17\x02\xd4\xb6\x7f\x66\x2d\xfc\xf0\x6a\x71\x1f\x92\x0e\x5d\x6c\xd7\xc1\xc5\xe5\xd0\x50\xff\x75\xc5\xf7\xc6\xc0\xa0\x7d\x62\xf2\xcc\xe7\x1b\x00\x00\xff\xff\x8e\xbc\xcf\xda\x98\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 152, mode: os.FileMode(420), modTime: time.Unix(1478141603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8d\xe1\x6a\x83\x40\x10\x84\xff\xfb\x14\x8b\x28\xb4\xa0\xfb\x00\x85\x3e\x40\xff\x14\x69\x4b\xff\x5f\xe2\x68\x16\xf4\x62\xee\x4e\x43\x58\xf6\xdd\x83\x07\xf1\xd7\x0c\x33\xc3\x37\xaa\x3d\x06\xf1\xa0\x72\x46\x8c\x6e\x44\x49\xad\x59\xa1\x2a\x03\xf9\x6b\x22\xfe\x5d\x4f\x09\x31\x45\xb3\xfa\xc6\xa4\x0a\xdf\x9b\xa9\xde\x25\x5d\x88\x7f\x70\x86\x6c\x08\x7b\xc2\x7f\x8f\x05\xfc\xef\xa6\x15\x66\x7c\x0c\xf9\xdb\xcd\x30\x7b\xcb\x44\xee\x82\xf8\xf4\xe5\x97\x75\x07\xaa\x06\xe7\x47\x50\x25\x0d\x55\x98\xe8\xe3\x93\xb8\x73\xc1\xcd\x48\x08\xb9\x97\x81\x2a\x31\x6b\x5e\xbf\xf5\x76\x70\xb3\xbc\x17\xaa\x2d\x65\xfb\x0c\x00\x00\xff\xff\x90\x2e\xb9\x52\xc9\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 201, mode: os.FileMode(420), modTime: time.Unix(1478141512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\x4d\x0a\xc2\x40\x0c\x85\xaf\xf2\x28\xb3\x2c\x3d\x80\xe0\x52\xdc\x7b\x03\xa1\x19\x09\x94\x0c\xbc\x99\xae\x42\xee\x2e\xa9\x45\xc1\x55\x7e\xbe\x2f\x79\xee\xab\x54\x35\xc1\x44\xe9\xfb\x36\xfa\x14\x01\x77\x3e\xed\x25\x28\x3a\xa3\xc8\x86\xcb\x15\xcb\xe3\x83\x23\xdc\xb5\xa2\x68\xc4\x0c\x77\xb1\x35\x37\xf7\x36\xb0\x64\x73\xce\x5a\xf3\x60\xec\xb4\x7e\x23\x1b\x53\x16\xf2\xe4\x38\x84\xc6\xef\xd3\x7f\x39\x03\x7f\xee\x51\xdf\x01\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(420), modTime: time.Unix(1476415710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

