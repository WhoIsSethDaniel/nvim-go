// Code generated by go-bindata.
// sources:
// templates/call.tmpl
// templates/function.tmpl
// templates/header.tmpl
// templates/inline.tmpl
// templates/inputs.tmpl
// templates/message.tmpl
// templates/results.tmpl
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCallTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xe1\x8a\xc2\x40\x0c\x84\x5f\x25\x94\xfe\xb8\x83\x92\x07\x38\xb8\x07\xb8\x3f\x87\xa8\xe8\xef\x65\x9b\xd6\x40\x5d\x25\x8d\x8a\x84\xbc\xbb\xbb\xa5\xba\xbf\x02\x33\x5f\x66\xc6\xac\xa7\x81\x13\x41\x13\xc3\x34\x35\xee\x66\x0f\xd6\x13\xe0\x96\x22\xf1\x9d\xa4\x28\x3c\x40\xba\x28\xe0\xdf\xbc\x53\xb9\x45\x75\x57\x45\x33\x4a\x7d\x71\xdf\x24\xa0\x7b\x55\xf1\x3f\x9c\xc9\xfd\xcb\x4c\x42\x1a\x09\x5a\xee\xa0\xa5\x09\x7e\x7e\x01\x37\x41\xb2\xa9\x24\xf3\x9a\xde\xb2\x7b\x07\x9f\xdf\xda\x77\x14\xd6\xb2\x21\xf7\x05\x19\xe7\x1a\xbf\x44\x94\xc6\x85\xc6\xfd\xf3\x4a\x19\x3f\x04\xe1\xd0\x73\xcc\x43\xb0\xb2\xcb\xf9\x5e\xef\x2b\x00\x00\xff\xff\x65\x08\xbc\x88\xf1\x00\x00\x00")

func templatesCallTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCallTmpl,
		"templates/call.tmpl",
	)
}

func templatesCallTmpl() (*asset, error) {
	bytes, err := templatesCallTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/call.tmpl", size: 241, mode: os.FileMode(420), modTime: time.Unix(1466309522, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFunctionTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xd1\x4f\xdb\x3e\x10\x7e\x4e\xff\x8a\xa3\x02\xd4\xfc\xd4\x9f\x79\x07\xf1\x30\x04\x9b\xf6\x30\x3a\x01\x1a\x0f\xd3\x34\x99\xf4\xd2\x45\x33\x4e\x67\x3b\xa0\x2a\xca\xff\xbe\xb3\x63\xa7\x4e\x9a\xb5\x4c\xda\x0b\x6d\x2e\xbe\xfb\xbe\xfb\xee\xf3\xd1\xba\x5e\x62\x5e\x48\x84\x69\x5e\xc9\xcc\x14\xa5\x9c\x36\x0d\x4c\xea\xfa\x7f\x38\xce\xe1\xfc\x12\x58\xd3\x4c\x26\xf6\x1d\xd4\x35\x7b\x40\x6d\x6e\xf9\x33\x36\xcd\xcc\xc0\x7f\x86\x9e\x0a\xb9\x62\x0f\x29\xd4\x93\xc4\xa6\xbc\x16\xe6\x07\xb0\x3b\xcc\xb0\x78\x41\x45\x99\x89\x0b\x17\x39\xb0\x8f\xfa\xde\xa8\x2a\x33\x2e\xd8\x45\xdf\x17\x28\x96\xba\x8d\x25\x66\xb3\x46\xc8\x5d\x04\xb4\x3b\x6c\xeb\xfa\xd3\x8a\xcb\x15\x0e\x12\xe8\x85\x7b\xb6\x24\x1d\x3d\x2a\xe0\x5f\xd9\x14\x94\x4b\xff\xd4\x61\x86\x50\xf4\x7d\xf0\xd5\xb2\xb2\x6d\x7e\xe6\x8a\x1a\x35\xa8\x1c\x98\xa3\xc6\xd5\xaa\x47\x2c\xa2\xb5\x9b\xe1\x00\x5d\x68\x87\x5d\x84\xd8\xc7\xb7\x82\x6a\x2b\xfa\xd7\x6f\x11\x8c\xa4\xaa\x16\x96\xa4\xf6\xc9\x23\x32\x07\xee\x5c\x2e\xb7\x5a\x0f\xe4\xf2\xd2\xb6\x1f\x9d\x22\x42\x6f\x35\x0b\x25\xfb\x94\x61\x8f\x7a\x7b\x34\x4b\x12\x27\x98\xfd\x33\x92\x13\x09\x77\x87\xba\x12\x46\x87\x3e\x1e\xb9\x34\xfb\x34\xeb\x20\xef\xd0\x54\x4a\xea\x1b\xa5\x4a\x2f\xc2\x2b\xa5\xd2\x23\x3c\x95\xa5\x18\x08\x6d\x95\x3c\x3b\x83\x87\xc5\xf5\xe2\x1c\xde\x2d\x97\x60\xc5\x86\x8c\x6b\xd4\xcc\xcd\x21\x2f\x15\x21\x52\x5d\x59\x1a\x2b\xe1\x2d\xff\x89\x94\x0a\xdf\xe7\x60\x8c\x1d\x4a\x5d\xbb\x5a\x9e\x79\x3b\xab\xfa\xf0\x44\x06\xce\x1f\xaa\xec\x0a\x3b\x01\xa9\x55\x77\x96\x53\xfe\xa9\x07\xf3\x12\xb0\x2f\x5c\x54\x24\x44\x0d\x87\xee\x03\x6b\xaf\xe7\x39\x71\x66\xed\xa0\x59\x74\x49\xe6\xf0\x97\x97\x23\x86\x1a\x4e\x77\xdb\xdf\xa3\x2a\x4c\xe8\xba\xe7\x7a\x6a\xee\xf4\x69\x43\x52\xb1\xab\x2a\xcf\x51\xd5\x07\xb1\xbc\x85\x67\x6e\x08\x0b\x29\x36\xf1\x90\xd3\xdd\xf8\x42\xa2\xd3\x26\x85\x40\xca\xe0\xf3\x5a\x70\x43\x1b\x4d\xb5\xbe\x9a\xd2\x26\x73\x6e\xda\xbe\xc9\xb8\x10\x6d\xf8\xcd\xd6\xa2\x68\x3b\xa7\x21\x29\x2a\x8d\x64\x39\x37\xc7\x31\x84\x8b\xce\x38\x33\x7b\xee\xe8\x12\x64\x21\x52\xfb\x49\x23\x0a\x86\x6d\xf7\x9c\x61\xae\x62\x3e\x9b\xc6\xa5\x9e\x51\x6b\xbe\x42\xdf\x06\xda\x13\x70\x09\x27\x2f\x73\x08\xd9\x27\x2f\xd3\x79\x0f\xbd\x90\xeb\xaa\x6b\x9c\x32\xe6\x11\x56\xda\x59\x20\x5c\xdb\xde\xfd\x4b\x92\xac\x94\xb4\xd6\x2b\xdc\xb5\xca\x1e\x73\x8c\xdc\xe3\x51\x77\x38\x19\x3f\x94\x66\xeb\xfd\xce\x2d\xec\xde\xed\xb8\x59\x7a\x11\x1d\x69\x65\x8a\x97\x02\xc4\x9b\xcb\x43\x5c\x71\x5d\x64\xd1\xf6\x0f\xc3\x3a\xce\xc7\xbc\x62\xaf\x55\x8f\x42\x2c\x9c\xa0\x7f\x86\xc3\xc1\xed\xa3\x33\xb2\x47\xff\x31\xfa\x91\xc2\x5c\x60\x66\xd8\x35\xe2\xfa\xe6\x57\xc5\xc5\xac\xab\x30\xef\xd3\x49\x23\x3e\x61\x68\x6f\x31\x55\xa0\xeb\xa9\x7e\xa2\x31\x16\x6b\xd1\xa3\xea\xd9\x6c\x8d\x77\xc0\x75\x7f\xa4\x38\x62\xa4\x66\x42\xbf\x31\x3c\xc0\xe4\x77\x00\x00\x00\xff\xff\x9b\x1b\xc7\xd1\x92\x08\x00\x00")

func templatesFunctionTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFunctionTmpl,
		"templates/function.tmpl",
	)
}

func templatesFunctionTmpl() (*asset, error) {
	bytes, err := templatesFunctionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/function.tmpl", size: 2194, mode: os.FileMode(420), modTime: time.Unix(1466311246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\xaa\xad\xe5\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xa8\xae\xd6\x0b\x80\x30\x81\x82\x5c\x99\xb9\x05\xf9\x45\x25\x0a\x1a\x5c\xd5\xd5\x45\x89\x79\x40\x69\x3d\x4f\xb0\x48\x71\x6d\x2d\x50\xa1\x5f\x62\x2e\x50\x15\x44\x4b\x49\x06\x50\x7d\x75\x75\x6a\x5e\x0a\x90\xd6\x84\xb3\x00\x01\x00\x00\xff\xff\x81\x22\x53\x6f\x6b\x00\x00\x00")

func templatesHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTmpl,
		"templates/header.tmpl",
	)
}

func templatesHeaderTmpl() (*asset, error) {
	bytes, err := templatesHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tmpl", size: 107, mode: os.FileMode(436), modTime: time.Unix(1455586613, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInlineTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\xcc\xcb\x01\xd2\x4a\xb5\xb5\x0a\xd5\xd5\x25\xa9\xb9\x05\x39\x89\x25\x40\xd1\xe4\xc4\x9c\x1c\x25\x05\x3d\xb0\x68\x6a\x5e\x4a\x6d\x2d\x20\x00\x00\xff\xff\xaa\xeb\x41\xff\x31\x00\x00\x00")

func templatesInlineTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInlineTmpl,
		"templates/inline.tmpl",
	)
}

func templatesInlineTmpl() (*asset, error) {
	bytes, err := templatesInlineTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inline.tmpl", size: 49, mode: os.FileMode(420), modTime: time.Unix(1458418263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInputsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8c\xb1\x09\x03\x41\x0c\x04\x5b\x11\xcf\x87\xe6\x0a\x30\xb8\x00\x67\x6e\xe1\xe0\xa5\x47\x81\x85\xd1\xc9\xd1\xa2\xde\x6d\x29\xfa\x68\x61\x99\x19\xe0\x60\x51\x63\xda\xd4\x3e\xdf\x58\x5b\x26\xb0\x0b\xdd\x1f\x34\x32\x23\x86\xcd\x37\xdf\x08\x50\xa1\x5d\xc6\xcb\xd5\xe2\xd9\x64\x81\x3e\xed\xe4\xfe\xa7\xff\xb9\x60\x5f\x2d\x4d\x3f\xd7\x00\xfa\xad\x4e\x05\xd8\x8e\x52\xae\xf3\x0b\x00\x00\xff\xff\x29\xf9\x2c\xf6\x7d\x00\x00\x00")

func templatesInputsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInputsTmpl,
		"templates/inputs.tmpl",
	)
}

func templatesInputsTmpl() (*asset, error) {
	bytes, err := templatesInputsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/inputs.tmpl", size: 125, mode: os.FileMode(420), modTime: time.Unix(1466311185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMessageTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8c\x51\x0a\xc2\x30\x10\x44\xaf\xb2\x94\x16\x14\xca\x1e\x40\xf0\x00\xfe\x88\x88\xf8\x1f\xec\xb4\x2e\xb4\xa1\x26\x69\x45\x96\xbd\xbb\x31\x14\xbf\x06\x66\xde\x3c\xd5\x0e\xbd\x78\x50\x35\x21\x46\x37\xa0\x32\x6b\x5e\x4c\xaa\x6f\x49\x4f\xe2\x2b\x1e\x90\x15\xc1\x4c\x95\x6f\x9f\x19\x7c\x77\xe3\x02\x33\x56\x85\xef\x4a\x7d\x76\x53\x2e\x76\xaa\xd2\x13\x5f\x82\xf8\x74\xf2\xf3\x92\xe2\x6f\x0c\xce\x0f\xa0\x5a\x5a\xaa\x31\xd2\xe1\x98\x01\x17\x32\x9f\x10\xca\x9e\x2f\xb5\x98\xb5\xb4\xe9\x9a\xf5\xef\x2d\xb1\xdf\xf2\x1b\x00\x00\xff\xff\x18\x21\x0c\x43\xa8\x00\x00\x00")

func templatesMessageTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMessageTmpl,
		"templates/message.tmpl",
	)
}

func templatesMessageTmpl() (*asset, error) {
	bytes, err := templatesMessageTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/message.tmpl", size: 168, mode: os.FileMode(436), modTime: time.Unix(1466311210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResultsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcd\x41\x0a\xc2\x40\x0c\x05\xd0\xab\x7c\x4a\x97\xa5\x07\x10\x5c\x8a\x7b\x6f\x20\x34\x95\x81\x92\x81\x3f\xd3\x55\xc8\xdd\x4d\x6a\x51\x70\x35\x93\xfc\x97\xc4\x6c\x91\xb5\xa8\x60\xa0\xb4\x7d\xeb\x6d\x70\x87\x19\x9f\xfa\x12\x8c\x65\xc2\x28\x1b\x2e\x57\xcc\x8f\x4f\xec\x6e\x56\xd6\x48\xdc\xa7\x70\xa2\x4b\x76\xee\xb5\x63\xce\xcf\x59\x87\x88\x81\xbe\x53\xdb\x8d\xac\x4c\x2c\xe4\x99\xe3\x00\x95\xdf\xa5\xff\x38\x0f\xfe\xec\xf1\xbe\x03\x00\x00\xff\xff\xb0\x4f\xcf\x61\xa8\x00\x00\x00")

func templatesResultsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesResultsTmpl,
		"templates/results.tmpl",
	)
}

func templatesResultsTmpl() (*asset, error) {
	bytes, err := templatesResultsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/results.tmpl", size: 168, mode: os.FileMode(436), modTime: time.Unix(1455586613, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/call.tmpl": templatesCallTmpl,
	"templates/function.tmpl": templatesFunctionTmpl,
	"templates/header.tmpl": templatesHeaderTmpl,
	"templates/inline.tmpl": templatesInlineTmpl,
	"templates/inputs.tmpl": templatesInputsTmpl,
	"templates/message.tmpl": templatesMessageTmpl,
	"templates/results.tmpl": templatesResultsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"call.tmpl": &bintree{templatesCallTmpl, map[string]*bintree{}},
		"function.tmpl": &bintree{templatesFunctionTmpl, map[string]*bintree{}},
		"header.tmpl": &bintree{templatesHeaderTmpl, map[string]*bintree{}},
		"inline.tmpl": &bintree{templatesInlineTmpl, map[string]*bintree{}},
		"inputs.tmpl": &bintree{templatesInputsTmpl, map[string]*bintree{}},
		"message.tmpl": &bintree{templatesMessageTmpl, map[string]*bintree{}},
		"results.tmpl": &bintree{templatesResultsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

